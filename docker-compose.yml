version: "3"

x-app-dotenv-variables: &app-dotenv-variables
  env_file: 
    - app.env

x-app-secrets: &app-secrets
- DATABASE_URL=psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@psql:5432/${POSTGRES_DB}
- SECRET_KEY=${SECRET_KEY}
- DJANGO_CSRF_TRUSTED_ORIGINS=${DJANGO_CSRF_TRUSTED_ORIGINS}
- SENTRY_ENABLED=${SENTRY_ENABLED}
- SENTRY_DSN=${SENTRY_DSN}
- SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}
- SENTRY_RELEASE=${SENTRY_RELEASE}
- SITE_SCHEME=${SITE_SCHEME}
- SITE_HOST=${NGINX_HOST}
- WAIT_TIMEOUT=90

x-logging: &logging
  driver: "fluentd"
  options:
    tag: "docker.{{.Name}}"
    fluentd-address: "127.0.0.1:24224"

services:

  frontend:
    image: registry-one.codescoring.ru/ipcs-frontend:${CODESCORING_VERSION}
    restart: unless-stopped
    depends_on:
      - backend
    volumes:
      - django-static:/ipcs-backend/files/static
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    logging: *logging
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}

  backend:
    <<: *app-dotenv-variables
    environment: *app-secrets
    image: registry-one.codescoring.ru/ipcs-backend:${CODESCORING_VERSION}
    restart: unless-stopped
    depends_on:
      - fluentd
      - redis
      - psql
    volumes:
      - django-static:/ipcs-backend/files/static
      - analysis-root:/analysis-root
      - ./ssl:/usr/local/share/ca-certificates
    ports:
      - "18000:18000"
    logging: *logging
    command: >
      /bin/bash -c "/wait && \
        cd /ipcs-backend && \
        echo 'Run migrate' && \
        python ./manage.py migrate && \
        echo 'Run collectstatic' && \
        python ./manage.py collectstatic --noinput && \
        gunicorn ipcs.wsgi -c gunicorn_conf.py
      "
  huey:
    <<: *app-dotenv-variables
    environment: *app-secrets

    image: registry-one.codescoring.ru/ipcs-huey:${CODESCORING_VERSION}
    restart: unless-stopped
    depends_on:
      - fluentd
      - redis
      - backend
    volumes:
      - django-static:/ipcs-backend/files/static
      - analysis-root:/analysis-root
      - ./ssl:/usr/local/share/ca-certificates
    logging: *logging
    command: >
      /bin/bash -c "/wait && \
        cd /ipcs-backend && \
        python ./manage.py djangohuey --queue ipcs
      "

  tasks-high-priority:
    <<: *app-dotenv-variables
    environment: *app-secrets

    image: registry-one.codescoring.ru/ipcs-huey:${CODESCORING_VERSION}
    restart: unless-stopped
    depends_on:
      - fluentd
      - redis
      - backend
    volumes:
      - django-static:/ipcs-backend/files/static
      - analysis-root:/analysis-root
      - ./ssl:/usr/local/share/ca-certificates
    logging: *logging
    command: >
      /bin/bash -c "/wait && \
        cd /ipcs-backend && \
        python ./manage.py djangohuey --queue high-priority
      "

  psql:
    image: postgres:13.4
    restart: unless-stopped
    depends_on:
      - fluentd
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres:/etc/postgresql
    ports:
      - "5432:5432"
    logging: *logging
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: "postgres -c config_file=/etc/postgresql/postgresql.conf"
    shm_size: '4gb'

  redis:
    image: redis:7.0.5
    depends_on:
      - fluentd
    volumes:
      - redis-data:/var/lib/redis
    ports:
      - "6379:6379"
    logging: *logging
    deploy:
      restart_policy:
        condition: on-failure

  fluentd:
    image: fluent/fluentd:v1.15-1
    restart: unless-stopped
    volumes:
      - fluentd-data:/fluentd/log
    ports:
      - "24224:24224"

  backup:
    image: registry-one.codescoring.ru/ipcs-backup:${CODESCORING_VERSION}
    volumes:
      - ./backup:/backup
    depends_on:
      - psql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    profiles:
      - donotstart

volumes:
  db-data:
  redis-data:
  django-static:
  analysis-root:
  fluentd-data:
